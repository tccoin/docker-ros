################################################################################
# base system
################################################################################

# qemu helper for arm build
FROM ubuntu:focal as amd64
RUN apt-get update && apt-get install -y qemu-user-static
FROM arm64v8/ros:noetic-perception as system
COPY --from=amd64 /usr/bin/qemu-aarch64-static /usr/bin/

RUN sed -i 's#http://archive.ubuntu.com/ubuntu/#mirror://mirrors.ubuntu.com/mirrors.txt#' /etc/apt/sources.list;


################################################################################
# PROXY
################################################################################

# ENV HTTP_PROXY="http://192.168.0.187:10809"  \
#     HTTPS_PROXY="http://192.168.0.187:10809" \
#     http_proxy="http://192.168.0.187:10809"  \
#     https_proxy="http://192.168.0.187:10809"

# RUN sudo touch /etc/apt/apt.conf.d/proxy.conf \ 
#     && sudo echo "Acquire::http::Proxy \"http://192.168.0.187:10809\";" > /etc/apt/apt.conf.d/proxy.conf \ 
#     && sudo echo "Acquire::http::Proxy \"http://192.168.0.187:10809\";" >> /etc/apt/apt.conf.d/proxy.conf \ 
#     && sudo cat /etc/apt/apt.conf.d/proxy.conf


################################################################################
# VNC
################################################################################

# built-in packages
ENV DEBIAN_FRONTEND noninteractive
RUN apt-get update \
    && apt-get install -y --no-install-recommends software-properties-common \
    curl apache2-utils \
    apt-utils wget ca-certificates git nano less \
    && apt-get install -y --no-install-recommends --allow-unauthenticated \
    supervisor nginx sudo net-tools zenity xz-utils \
    dbus-x11 x11-utils alsa-utils \
    mesa-utils libgl1-mesa-dri \
    && apt-get install -y --no-install-recommends --allow-unauthenticated \
    xvfb x11vnc=0.9.16-3 \
    vim-tiny ttf-ubuntu-font-family ttf-wqy-zenhei  \
    && apt-get install -y --no-install-recommends --allow-unauthenticated \
    lxde gtk2-engines-murrine gnome-themes-standard gtk2-engines-pixbuf gtk2-engines-murrine arc-theme \
    && apt-get autoclean -y \
    && apt-get autoremove -y \
    && rm -rf /var/lib/apt/lists/*

# tini for subreap
RUN curl https://github.com/krallin/tini/releases/download/v0.19.0/tini-arm64 -o /bin/tini \ 
    && chmod +x /bin/tini

# ffmpeg
RUN mkdir -p /usr/local/ffmpeg \
    && curl -sSL https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-amd64-static.tar.xz | tar xJvf - -C /usr/local/ffmpeg/ --strip 1

# python library

RUN wget https://raw.githubusercontent.com/tccoin/docker-ubuntu-vnc-desktop/develop/rootfs/usr/local/lib/web/backend/requirements.txt \
    -O /tmp/requirements.txt \
    && apt-get update \
    && dpkg-query -W -f='${Package}\n' > /tmp/a.txt \
    && apt-get install -y python3-pip python3-dev build-essential \
    && pip3 install setuptools wheel && pip3 install -r /tmp/requirements.txt \
    && dpkg-query -W -f='${Package}\n' > /tmp/b.txt \
    && apt-get remove -y `diff --changed-group-format='%>' --unchanged-group-format='' /tmp/a.txt /tmp/b.txt | xargs` \
    && apt-get autoclean -y \
    && apt-get autoremove -y \
    && rm -rf /var/lib/apt/lists/* \
    && rm -rf /var/cache/apt/* /tmp/a.txt /tmp/b.txt


###################
# builder
###################
FROM ubuntu:focal as builder


RUN sed -i 's#http://archive.ubuntu.com/ubuntu/#mirror://mirrors.ubuntu.com/mirrors.txt#' /etc/apt/sources.list;

RUN apt-get update \
    && apt-get install -y --no-install-recommends curl ca-certificates gnupg patch git

# nodejs
RUN curl -sL https://deb.nodesource.com/setup_12.x | bash - \
    && apt-get install -y nodejs

# yarn
RUN curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - \
    && echo "deb https://dl.yarnpkg.com/debian/ stable main" | tee /etc/apt/sources.list.d/yarn.list \
    && apt-get update \
    && apt-get install -y yarn

# build frontend
RUN git clone --recursive https://github.com/tccoin/docker-ubuntu-vnc-desktop /src/docker-ubuntu-vnc-desktop \
    && cp -r /src/docker-ubuntu-vnc-desktop/web /src/web
RUN cd /src/web \
    && yarn \
    && yarn build
RUN sed -i 's#app/locale/#novnc/app/locale/#' /src/web/dist/static/novnc/app/ui.js


RUN cd /src/web/dist/static/novnc && patch -p0 < /src/web/novnc-armhf-1.patch


###################
# merge
###################
FROM system

COPY --from=builder /src/web/dist/ /usr/local/lib/web/frontend/
COPY --from=builder /src/docker-ubuntu-vnc-desktop/rootfs/ /
RUN ln -sf /usr/local/lib/web/frontend/static/websockify /usr/local/lib/web/frontend/static/novnc/utils/websockify \
    && chmod +x /usr/local/lib/web/frontend/static/websockify/run \
    && ln -s /usr/bin/python3 /usr/bin/python

EXPOSE 80

################################################################################
# Development Tools
################################################################################

WORKDIR /root/ws
ENV HOME=/root

RUN echo "deb http://packages.ros.org/ros/ubuntu trusty main" > /etc/apt/sources.list.d/ros-latest.list
RUN apt-key adv --keyserver "hkp://ha.pool.sks-keyservers.net" --recv-key "0xB01FA116" \
    || { wget "https://raw.githubusercontent.com/ros/rosdistro/master/ros.key" -O - | sudo apt-key add -; }
RUN sh -c 'echo "deb http://packages.ros.org/ros/ubuntu `lsb_release -cs` main" > /etc/apt/sources.list.d/ros-latest.list' \ 
    && apt-key adv --keyserver 'hkp://keyserver.ubuntu.com:80' --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654

# install build dependency
RUN sed -i "/^# deb.*multiverse/ s/^# //" /etc/apt/sources.list \ 
    && apt-get update \ 
    && apt-get install --no-install-recommends -y \
    ros-${ROS_DISTRO}-ros-base \
    ros-${ROS_DISTRO}-catkin \
    build-essential \
    python3-colcon-common-extensions \
    python3-catkin-tools \
    python3-osrf-pycommon \
    python3-rosdep \
    python3-wstool \
    ros-${ROS_DISTRO}-catkin

WORKDIR /root/build

# install tilix
RUN sudo apt-get install -y \
    tilix

# install zsh
RUN git clone https://github.com/tccoin/easy-linux.git \
    && cd easy-linux \
    && ./zsh.sh \
    && touch /root/.z \
    && rm /root/.zshrc

# ADD src/.zshrc /root

# install gitstatus
# https://github.com/romkatv/gitstatus/releases/tag/v 1.3.1
RUN mkdir -p /root/.cache/gitstatus \
    && wget https://github.com/romkatv/gitstatus/releases/download/v1.3.1/gitstatusd-linux-aarch64.tar.gz -O - \
    | tar -zx -C /root/.cache/gitstatus/

# install conda
RUN wget https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-aarch64.sh -O ~/miniconda.sh \
    && bash ~/miniconda.sh -b -p $HOME/miniconda \
    && rm ~/miniconda.sh

################################################################################
# Program Dependency
################################################################################

WORKDIR /root/build

RUN wget https://github.com/tccoin/container-static-files/releases/download/Galaxy_Linux/Galaxy_Linux-armhf_Gige-U3_32bits-64bits_1.3.1911.9271.tar.gz -O - \
    | tar -zx \
    && cd Galaxy_Linux-armhf_Gige-U3_32bits-64bits_1.3.1911.9271/ \
    && echo '\n' | ./Galaxy_camera.run

RUN wget https://github.com/tccoin/container-static-files/releases/download/Galaxy_Linux/Galaxy_Linux_Python_2.0.2008.9111.tar.gz -O - \
    | tar -zx

WORKDIR /root

SHELL ["/bin/bash", "-l", "-c"]

RUN mkdir -p catkin_ws/src \
    && cd catkin_ws \
    && git clone https://github.com/tccoin/galaxy_camera.git src/galaxy_camera \
    && source /opt/ros/noetic/setup.bash \
    && catkin_make

RUN PATH="$HOME/miniconda/bin:$PATH" conda install -y opencv numpy python=3.7

RUN /root/miniconda/bin/pip3 install opencv-contrib-python pyserial toolz

RUN cd ~/build/Galaxy_Linux_Python_2.0.2008.9111/api/ \
    && /root/miniconda/bin/pip3 install .

RUN apt-get install -y ros-noetic-rqt ros-noetic-rqt-common-plugins

HEALTHCHECK --interval=30s --timeout=5s CMD curl --fail http://127.0.0.1:6079/api/health
ENTRYPOINT ["/bin/zsh"]